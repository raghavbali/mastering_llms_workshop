# LLM.txt - Repository Status and Documentation

## Repository Overview
**Repository:** mastering_llms_workshop_dhs2025  
**Purpose:** Full Day Workshop on Mastering LLMs: Training, Fine-Tuning, and Best Practices  
**License:** GNU General Public License v3.0

## Current Repository Structure
```
mastering_llms_workshop_dhs2025/
├── README.md                    # Main repository overview and setup
├── LICENSE                      # GPL v3.0 license
├── copilot-instructions.md      # Development guidelines and best practices
├── llm.txt                      # This documentation file
└── docs/
    ├── assets/                  # Images and supporting files
    ├── module_01_lm_fundamentals/
    │   ├── 01_text_representation.ipynb
    │   ├── 02_contextual_embeddings.ipynb
    │   └── README.md
    ├── module_02_llm_building_blocks/
    │   ├── 01_transformers.ipynb
    │   ├── 02_transformers_pipelines.ipynb
    │   ├── 03_training_language_models.ipynb
    │   ├── 04_llm_training_and_scaling.ipynb
    │   └── README.md
    ├── module_03_instruction_tuning_and_alignment/
    │   ├── 01_instruction_tuning_llama_txt2py.ipynb
    │   ├── 02_RLHF_phi2.ipynb
    │   ├── 03_zephyr_alignment_dpo.ipynb
    │   └── README.md
    ├── module_04_llm_apps/
    │   ├── 01_retrieval_augmented_llm_app.ipynb
    │   ├── 02_dspy_demo.ipynb
    │   ├── 03_mcp_getting_started.ipynb
    │   ├── app.py
    │   ├── constants.py
    │   ├── mcp_chatbot.py
    │   ├── openai_mcp_handler.py
    │   ├── README.md
    │   └── ...
    └── ...
```

## Development Setup and Requirements
- **Python Version:** 3.11 or above (required for all code and notebooks)
- **Preferred Environment:** Jupyter Lab (for interactive development, tutorials, and prototyping)
- **Dependency Management:** Poetry (planned), currently install dependencies as needed per notebook/module

## Key Technologies and Frameworks
- Python 3.11+
- Jupyter Lab
- PyTorch, HuggingFace Transformers, Datasets, Tokenizers
- LangChain, DSpy, ChromaDB, Model Context Protocol (MCP)
- Additional libraries as specified in individual notebooks

## Module-wise Overview

### Module 01: Language Model Fundamentals
- **Notebooks:**
  - 01_text_representation.ipynb: Covers tokenization, vectorization, and word embeddings (Word2Vec, FastText)
  - 02_contextual_embeddings.ipynb: Contextual embeddings using transformer models (BERT, MiniLM)
- **Learning Objectives:**
  - Understand text representation and embedding techniques
  - Compare static and contextual embeddings
  - Visualize and apply embeddings in NLP tasks

### Module 02: LLM Building Blocks
- **Notebooks:**
  - 01_transformers.ipynb: Transformer architecture and self-attention
  - 02_transformers_pipelines.ipynb: HuggingFace pipelines for NLP tasks
  - 03_training_language_models.ipynb: Fine-tuning and training LLMs
  - 04_llm_training_and_scaling.ipynb: Scaling, optimization, and distributed training
- **Model Card:** codeparrot-ds/README.md (fine-tuned GPT-2)
- **Learning Objectives:**
  - Master transformer internals and practical pipelines
  - Train and fine-tune LLMs
  - Understand scaling and optimization strategies

### Module 03: Instruction Tuning and Alignment
- **Notebooks:**
  - 01_instruction_tuning_llama_txt2py.ipynb: Supervised instruction tuning
  - 02_RLHF_phi2.ipynb: RLHF with Phi-2
  - 03_zephyr_alignment_dpo.ipynb: DPO and advanced alignment
- **Learning Objectives:**
  - Instruction tuning for LLMs
  - RLHF and preference optimization
  - Direct Preference Optimization (DPO)

### Module 04: LLM Applications
- **Notebooks & Scripts:**
  - 01_retrieval_augmented_llm_app.ipynb: Retrieval-Augmented Generation (RAG)
  - 02_dspy_demo.ipynb: DSpy for prompt engineering
  - 03_mcp_getting_started.ipynb: Model Context Protocol (MCP)
  - app.py, mcp_chatbot.py, openai_mcp_handler.py, etc.: Application code
- **Learning Objectives:**
  - Build real-world LLM applications (RAG, LangChain, DSpy, MCP)
  - Tool/function calling and workflow automation

## Documentation and Maintenance Standards
- All modules and notebooks are documented with clear markdown cells and outputs
- Each module contains a README.md with:
  - Title, description, and table of contents (with links to notebooks)
  - Learning objectives and summary
  - Attribution and timestamp
- Main README.md provides workshop overview, setup, and navigation
- **Keep llm.txt and all READMEs updated with each significant change**
- Follow copilot-instructions.md for best practices, naming, and structure

## Code Quality and Testing
- All code uses Python 3.11+ features and type hints optionally present
- Notebooks are tested for end-to-end execution

## Resource and Accessibility Guidelines
- Designed for low-resource and cloud environments
- GPU recommended for training/fine-tuning, but alternatives provided
- Content accessible for both beginners and advanced users
- Multiple learning paths and practical exercises included

## Contribution and Version Control
- Follow atomic commits and conventional commit messages
- Update documentation and llm.txt with code changes
- Test all workshop materials before merging
- Keep style and approach consistent across modules

## Learning Resources and References
- See module READMEs and notebooks for links to papers, docs, and external resources
- Workshop website: https://raghavbali.github.io/mastering_llms_workshop/

---
**Last Updated:** August 10, 2025  
**Generated by:** GitHub Copilot (LLM)  
---